metadata:
  title: Small Estate Affidavit
  short title: Small Estate Affidavit
  comment:  This program helps you prepare a Small Estate Affidavit in Illinois. 
  authors:
    - Jim Graszer
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
---
objects:
  - decedent: ALIndividual
  - decedent_property: ALAddress
  - decedent_assets: DAList.using(object_type=Thing, there_are_any=True, complete_attribute='complete')
  - spouse: ALIndividual
  - heirs: ALPeopleList.using(complete_attribute='complete')
  - non_reside_children: DAList.using(object_type=ALIndividual)
  - unpaid_funeral_expense: DAList.using(object_type=Thing, complete_attribute='complete')
  - unpaid_funeral_expense[i].address: ALAddress
  - us_debts: DAList.using(object_type=Thing, complete_attribute='complete')
  - us_debts[i].address: ALAddress
  - employees: DAList.using(object_type=Thing, complete_attribute='complete')
  - employees[i].address: ALAddress
  - trust_property: DAList.using(object_type=Thing, complete_attribute='complete')
  - illinois_debts: DAList.using(object_type=Thing, complete_attribute='complete')
  - illinois_debts[i].address: ALAddress
  - other_claims: DAList.using(object_type=Thing, complete_attribute='complete')
  - other_claims[i].address: ALAddress
  - heirs_list: ALPeopleList.using(complete_attribute='complete'))
  - users: ALIndividual
  - users.address: ALAddress
  - agent: ALIndividual
  - agent.address: ALAddress
  - all_recipients: ALPeopleList.using(object_type=ALIndividual, complete_attribute='complete')
  - court_list: ALCourtLoader.using(file_name='docassemble.ILAO:data/sources/il_courts.xlsx')

---
code: |
  ilao_easy_form_title = "Small Estate Affidavit"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/small-estate-affidavit"
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-SmallEstateAffidavit'
---
sections:
  - review_answers: Review your answers
---
sections:
  - section_intro: Start
  - section_decedent: Decedent and heirs
  - section_estate: Estate details
  - section_payments: Payments from estate
  - section_user: About you
  - section_download: Download
---
#################### Interview order #####################
mandatory: True
code: |
  nav.set_section('section_intro')
  sees_nav_bar
  set_progress(5)
  sea_requirements
  how_to_use
  accept_terms
  set_progress(20)
  nav.set_section('section_decedent')
  decedent.name.first
  if illinois_death == False:
    not_in_illinois
  if assets_limit == False:
    assets_exceeded_kickout
  if decedent_will == True:
    if will_filed == False:
      will_filed_kickout
  if decedent.relationship == "none":
    no_relationship
  decedent_death_date
  # Small Estate Affidavit before 2010 has different award limits and doubled after
  if date_difference(starting=decedent_death_date, ending=as_datetime('7/2/2010')).seconds > 0:
    spouse_limit = 10000
    child_limit = 5000
  else:
    spouse_limit = 20000
    child_limit = 10000
  decedent_property.address
  trial_court = list()
  if len(decedent_property.county) > 0:
    decedent_property.county = decedent_property.county.split(' ',1)[0]
    trial_court = court_list.matching_courts_in_county(decedent_property.county)
  # Bad county needs to go through manual selection
  if len(trial_court) != 1 and 'cook' not in decedent_property.county.lower():
    manual_county
    decedent_property.county = manual_county
    trial_court = court_list.matching_courts_in_county(decedent_property.county)
  # Use located county to determine court judicial circuit
  if decedent_property.county == 'cook':
    judicial_circuit = ""
  else:
    trial_court = court_list.matching_courts_in_county(decedent_property.county)
    trial_court_index = trial_court[0][0]
    judicial_circuit = court_list.as_court('court_data', trial_court_index).circuit
  surviving_spouse

  spouse_award = "Not applicable" # Need to move this and calculate based on date of death
  child_only_award = "Not applicable" # Need to move this and calculate based on date of death
  if surviving_spouse == True:
    # spouse_award = 20000 # Need to move this and calculate based on date of death
    # child_only_award = "Not applicable" # Need to move this and calculate based on date of death
    if spouse_alive == True:
      spouse.name.first
      spouse.award = 0
      spouse.relationship = "spouse"
      spouse.address.address
  else:
    spouse_award = "Not applicable" # Need to move this and calculate based on date of death
    child_only_award = 10000 # Need to move this and calculate based on date of death
  if heirs.there_are_any == True:
    heirs.gather()
  
  recipients_list
  if all_recipients.there_are_any == True:
    all_recipients.gather()

  # Calculate the awards based on if there's a spouse and number of children
  if surviving_spouse == True:
    spouse_award = spouse_limit + (child_limit * heirs.number_gathered())
  else:
    child_only_award = spouse_limit + (child_limit * heirs.number_gathered())

  set_progress(40)
  nav.set_section('section_estate')
  sos_warning = False
  # Estate assets
  decedent_assets.gather()
  for asset in decedent_assets:
    if asset.name in ['Motor vehicle','Other property']:
      sos_warning = True
  unclaimed_property
  funeral_other_debts
  unpaid_funeral_expense.gather()
  set_progress(60)
  nav.set_section('section_payments')
  # Payments and debts
  payment_intro
  if funeral_other_debts == False:
    us_debts.gather()
    employees.gather()
    trust_property.gather()
    illinois_debts.gather()
    other_claims.gather()
  set_progress(80)
  nav.set_section('section_user')
  if user_heir_check == False:
    if user_representing_check == True:
      users.name.first
      users.address.address
      users.mailing_address.address
    else:
      no_heir_relationship
  else:
    if user_spouse == True:
      users = spouse
      users.mailing_address.address

  if agent_check == "yes":
    agent.name.first
    agent.address.address
    agent_include_phone

  set_progress(100)
  nav.set_section('section_download')
  finished
  forms_assembling
  get_docs_screen
---
id: welcome
question: |
  Small Estate Affidavit
subquestion: |
  Welcome to Illinois Legal Aid Online's Small Estate Affidavit program.

  This program will help you create a Small Estate Affidavit. The form you prepare with this program can only be used in Illinois.
field: sees_nav_bar
---
id: instructions
continue button field: how_to_use
question: |
  Instructions
subquestion: |
  To use this program you will need to know: 

  * Information about decedent ....
  * Information about estate ...
  * Names and addresses heirs
  * Any expenses to be paid from estate ...

  Set aside 10 to 15 minutes to finish this program. You can log in and save your work to return to later. 
 
  ${ collapse_template(help_example) }  

  Click on **{green words}** to learn what they mean. Some questions have a question mark in a circle 
  ${ fa_icon("question-circle", color_css="#0dcaf0" ) } that also gives help.
---
template: help_example
subject: |
  **You can expand sections like this to show more information.**
content: |  
  This is an example of help. Click again to hide.
---
id: sea requirements
continue button field: sea_requirements
question: |
  May I Use a Small Estate Affidavit?
subquestion: |
  You may use a small estate affidavit only if **ALL** of the following are true:

  - The total amount of personal property in the estate of the decedent (the person
  who died) is **no more than $100,000.**

  - The decedent did not own any real estate, or they owned real estate that went to
  someone else when they died. Ownership could go to someone else through a Transfer 
  on Death Instrument or if the real estate was owned in a [joint tenancy with the 
  right of survivorship.](https://www.isba.org/sites/default/files/publications/pamphlets/Estate%20Planning.pdf)

  - A probate court has not issued any "letters of office" for this estate. No application
  for letters of office is pending or contemplated. (See help text at the bottom of the
  screen for the definition of "letters of office.")

  - If there is a will, it must be filed with the clerk of the probate court. To the best
  of your knowledge, the will on file with the court is valid and is the decedent's last will.

  - You are not aware of any disputes or conflicts relating to the will or to the heirs
  of the decedent.

  - There are no outstanding unpaid claims or contested claims against the decedent (other
  than funeral expenses).
field: sea_requirements
---
#### KICKOUT QUESTIONS ####
id: no relationship kickout
event: no_relationship
question: |
  Sorry
subquestion: |
  You can only use this program with a valid relationship to ${decedent.name_full()}.
buttons:
  - Exit: exit
  - Restart: restart
---
id: no heir relationship kickout
event: no_heir_relationship
question: |
  Sorry
subquestion: |
  You can only use this program with a valid relationship to an heir of ${decedent.name_full()}.
buttons:
  - Exit: exit
  - Restart: restart
---
id: illinois death
question: |
  Did ${decedent.name_full()} live in Illinois at the time of death? 
fields:
  - no label: illinois_death
    datatype: yesnoradio
---
id: not in illinois kickout
event: not_in_illinois
question: |
  Sorry
subquestion: |
  You can only use this program if ${decedent.name_full()} lived in Illinois.
buttons:
  - Exit: exit
  - Restart: restart
---
id: assets limit
question: |
  Do you think ${decedent.name_full()}'s total assets are less than $100,000? 
fields:
  - no label: assets_limit
    datatype: yesnoradio
---
id: assets kickout
event: assets_exceeded_kickout
question: |
  Sorry
subquestion: |
  You can only use this program if ${decedent.name_full()}'s estate is under $100,000 in assets.
buttons:
  - Exit: exit
  - Restart: restart
---
id: decedent will
question: |
  Did ${decedent.name_full()} leave a will? 
fields:
  - no label: decedent_will
    datatype: yesnoradio
---
id: will filed
question: |
  If ${decedent.name_full()} had a will, is it filed with the clerk of appropariate court?
fields:
  - no label: will_filed
    datatype: yesnoradio
---
id: will filed kickout
event: will_filed_kickout
question: |
  Sorry
subquestion: |
  The will for ${decedent.name_full()} must first be filed with the court clerk beforehand.
buttons:
  - Exit: exit
  - Restart: restart
---
#### DECEDENT ####
id: decedent name
sets:
  - decedent.name.first
  - decedent.name.last
  - decedent.name.middle
  - decedent.name.suffix
question: |
  What is the name of the decedent?
fields:
  - code: |
      decedent.name_fields()
---
id: relationship to decedent
question: | 
  What is your relationship to ${decedent.name_full()}?
fields: 
  - Relationship: decedent.relationship
    input type: radio
    choices:
    - Spouse: spouse
    - Child: child
    - Representing spouse/child: representative
    - None of the above: none
---
id: decedent death date
question: |
  On what date did ${decedent.name_full()} die?
fields:
  - Date of death: decedent_death_date
    datatype: BirthDate
---
id: decedent address
question: |
  Where did ${decedent.name_full()} live immediately before death?
fields:
  - Street address: decedent_property.address
    address autocomplete: True
  - Address line 2: decedent_property.unit
    required: False
  - City: decedent_property.city
  - State: decedent_property.state
    code: |
      states_list()  
    default: IL
  - ZIP code: decedent_property.zip
  - County: decedent_property.county
    required: False
---
id: decedent county
question: |
  Problem with the address county:
subquestion: |
  Address lookup couldn't determine county. Select which county ${decedent.name_full()} lived 
  when they died:
fields:
  - County: manual_county
    code:
      court_list._load_courts()["address_county"].unique()
---
#### DECEDENT - SPOUSE ####
id: surviving spouse
question: |
  Was ${decedent.name_full()} married at the time of their death?
fields:
  - no label: surviving_spouse
    datatype: yesnoradio
  - "Is the spouse still alive?": spouse_alive
    datatype: yesnoradio
    show if: surviving_spouse
---
id: spouse name
sets:
  - spouse.name.first
  - spouse.name.last
  - spouse.name.middle
  - spouse.name.suffix
question: |
  Provide ${decedent.name_full()} spouse's name:
fields:
  - code: |
      spouse.name_fields()
---
id: spouse address
question: |
  Provide ${spouse.name_full()} address:
fields:
  - Same address as ${decedent.name_full()}?: spouse.address
    datatype: object_radio
    choices:
      - decedent_property
    object labeler: |
      lambda y: y.on_one_line()
    none of the above: |
      Somewhere else
    disable others: True
    show if:
      code: |
        defined("decedent_property")
    default: |
      decedent_property
  - Street address: spouse.address.address
    address autocomplete: True
  - Address line 2: spouse.address.unit
    required: False
  - City: spouse.address.city
  - State: spouse.address.state
    code: |
      states_list() 
  - ZIP code: spouse.address.zip
---
id: any other children
question: |
  Do you have any other children to tell us about?
subquestion: |
  So far you have told us about ${comma_and_list(heirs.complete_elements().full_names())}.
fields:
  - "Anyone else?": heirs.there_is_another
    datatype: yesnoradio
---
############### HEIRS BLOCK ################
code: |
  non_reside_children.clear()
  heirs[i].name.first
  heirs[i].address.address
  if heirs[i].address != decedent_property:
    non_reside_children.append(heirs[i])
  heirs[i].address.address
  heirs[i].award = 0
  heirs[i].complete = True 
  non_reside_children.gathered = True
---
#### DECEDENT CHILDREN - MINOR/ADULT ####
id: decedent minor children
question: |
  Did ${decedent.name_full()} have any minor or adult dependent children at the time of their death? 
fields:
  - no label: heirs.there_are_any
    datatype: yesnoradio
  - "Are the children still alive?": heirs.still_alive
    datatype: yesnoradio
    show if: heirs.there_are_any
---
id: adding children
sets:
  - heirs[i].name.first
  - heirs[i].name.last
  - heirs[i].name.middle
  - heirs[i].name.suffix
question: |
  What ${decedent.name_full()}'s ${ordinal(i)} child's name?
fields:
  - code: |
      heirs[i].name_fields()    
  - Relationship: heirs[i].relationship
    input type: radio
    choices:
    - Child
    - Adult Dependent Child
  - Minor: heirs[i].child_minor
    datatype: yesnoradio
    show if:
      variable: heirs[i].relationship
      is: Child
  - Birthdate: heirs[i].birthdate
    datatype: BirthDate
    alMax: ${ today().format("yyyy-MM-dd") }
    show if: heirs[i].child_minor
validation code: |
  if showifdef("heirs[i].birthdate") and heirs[i].age_in_years() > 18:
    validation_error("Minor child must be under 18")
---
sets:
  - heirs[i].address.address
id: child address
question: |
  What is the ${heirs[i].name_full()}'s address?
fields:
  - Same address as ${decedent.name_full()}?: heirs[i].address
    datatype: object_radio
    choices:
      - decedent_property
    object labeler: |
      lambda y: y.on_one_line()
    none of the above: |
      Somewhere else
    disable others: True
    show if:
      code: |
        defined("decedent_property")
    default: |
      decedent_property
  - Street address: heirs[i].address.address
    address autocomplete: True
  - Address line 2: heirs[i].address.unit
    required: False
  - City: heirs[i].address.city
  - State: heirs[i].address.state
    code: |
      states_list() 
  - ZIP code: heirs[i].address.zip
---
##### ESTATE #####
id: additional assets
question: |
  ${decedent.name_full()}'s Estate:
subquestion: |
  Below are the assets that have been entered so far.

  ***Note: Total assets cannot exceed $100,000.***
  ${ decedent_assets.table.show(editable=True) }

  % if sum(y.value for y in decedent_assets) <= 100000:
  <span style="color:black">Total of all assets in estate:
  % else:
  <span style="color:red">Total assets exceeds limit: 
  % endif
  ${currency(sum(y.value for y in decedent_assets))}</span>
fields:
  - "Add another asset?": decedent_assets.there_is_another
    datatype: yesnoradio
---
code: |
  decedent_assets[i].name.text
  decedent_assets[i].complete = True 
---
code: |
  asset_types = [
    'Savings account', 'Checking account', 'CD acount',
    'Cash','Money market acount','Motor vehicle',
    'Collectible','Art','Other property']
---
id: decedent assets 
question: |
  Details for the ${ ordinal(i) } asset
subquestion: |
  List each asset (including each bank account, stock, and cash) in ${decedent.name_full()}'s estate by
  selecting the asset from the menu. Add a description of the asset. An example is, "Account number 
  09-2863 at First Savings Bank." Enter the current market or resale value of each asset. Do not 
  enter "$" in your answers for value.
fields: 
  - Name: decedent_assets[i].name.text
    datatype: dropdown
    code: asset_types
  - Description: decedent_assets[i].description
  - Value: decedent_assets[i].value
    datatype: currency
    min: 0
---
id: unclaimed illinois property
question: |
  Unclaimed Property
subquestion: |
  The Illinois Treasurer's Office might have ${decedent.name_full()} unclaimed property. By adding the following
  text to the list of assets, it will make it easier to recover their money or assets.

  **"Funds and/or assets held with the Illinois Treasurer’s Office"**

  Do you want to add that text to the list of assets?
fields:
  - no label: unclaimed_property
    datatype: yesnoradio
---
id: other debts check
question: |
  Have all of ${decedent.name_full()}'s funeral expenses and other debts been paid?
fields:
  - no label: funeral_other_debts
    datatype: yesnoradio
---
#### FUNERAL EXPENSE ####
id: funeral expense check
question: |
  Did ${decedent.name_full()} have unpaid funeral expenses?
fields:
  - no label: unpaid_funeral_expense.there_are_any
    datatype: yesnoradio
---
code: |
  unpaid_funeral_expense[i].name.text
  unpaid_funeral_expense[i].complete = True 
---
id: unpaid funeral expense
question: |
  Funeral and Burial expenses
subquestion: |
  Below are funeral expense(s) entered so far.
  ${ unpaid_funeral_expense.table.show(editable=True) }
fields:
  - Are there any other funeral expense?: unpaid_funeral_expense.there_is_another
    datatype: yesnoradio
---
id: funeral expense owesd 
question: |
  Funeral and Burial expenses
fields:
  - Name: unpaid_funeral_expense[i].name.text
  - Street address: unpaid_funeral_expense[i].address.address
    address autocomplete: True
  - Address line 2: unpaid_funeral_expense[i].address.unit
    required: False
  - City: unpaid_funeral_expense[i].address.city
  - State: unpaid_funeral_expense[i].address.state
    code: |
      states_list() 
  - ZIP code: unpaid_funeral_expense[i].address.zip
  - Amount: unpaid_funeral_expense[i].value
    datatype: currency
    min: 0
---
######## PAYMENTS FROM ESTATE ###############
id: payments introduce
question: |
  Payments from estate
subquestion: |
  Intro area TODO to get the rest of the instructions later.

  Currently the limits are ${currency(spouse_limit)} and ${currency(child_limit)}
field: payment_intro
---
id: us debts
question: |
  Does test test owe any debts to the United States? Income taxes are an example.
fields:
  - no label: us_debts_paid
    datatype: yesnoradio
---
id: us debts
question: |
  Debts Due to United States
subquestion: |
  Did ${decedent.name_full()} owe any debts to the United States? 
  Income taxes are an example.
fields:
  - no label: us_debts.there_are_any
    datatype: yesnoradio
---
code: |
  us_debts[i].name.text
  us_debts[i].complete = True 
---
id: add us debts
question: |
  Debts Due to United States
subquestion: |
  Below are US debts entered so far:
  ${ us_debts.table.show(editable=True) }
fields:
  - Are there any other debts?: us_debts.there_is_another
    datatype: yesnoradio
---
id: us debts owed
question: |
  Debts Due to the United States
fields: 
  - Name: us_debts[i].name.text
  - Street address: us_debts[i].address.address
    address autocomplete: True
  - Address line 2: us_debts[i].address.unit
    required: False
  - City: us_debts[i].address.city
  - State: us_debts[i].address.state
    code: |
      states_list() 
  - ZIP code: us_debts[i].address.zip
  - Amount: us_debts[i].value
    datatype: currency
    min: 0
---
id: employment debts
question: |
  Money Due Employees
subquestion: |
  Does ${decedent.name_full()} owe any employee $800 or less for services rendered within four 
  months before ${decedent_death_date}, or for expenses attending the last illness?
fields:
  - no label: employees.there_are_any
    datatype: yesnoradio
---
code: |
  employees[i].name.text
  employees[i].complete = True 
---
id: add employment debt
question: |
  Money Due Employees
subquestion: |
  Below are the employee(s) entered so far:
  ${ employees.table.show(editable=True) }
fields:
  - Is there another employee?: employees.there_is_another
    datatype: yesnoradio
---
id: employee owed
question: |
  Money Due Employees
fields: 
  - "Employee Name": employees[i].name.text
  - Street address: employees[i].address.address
    address autocomplete: True
  - Address line 2: employees[i].address.unit
    required: False
  - City: employees[i].address.city
  - State: employees[i].address.state
    code: |
      states_list() 
  - ZIP code: employees[i].address.zip
  - "Amount Owed": employees[i].value
    datatype: currency
    min: 0
---
id: trust property
question: |
  Money or Property Held in Trust
subquestion: |
  Did ${decedent.name_full()} hold or receive money or other property in trust which cannot 
  be identified or traced?
fields:
  - no label: trust_property.there_are_any
    datatype: yesnoradio
---
code: |
  trust_property[i].name.text
  trust_property[i].complete = True 
---
id: add trust property
question: |
  Money or Property Held in Trust
subquestion: |
  Below are the property entered so far:
  ${ trust_property.table.show(editable=True) }
fields:
  - Are there any more property?: trust_property.there_is_another
    datatype: yesnoradio
---
id: trust property details
question: |
  Money or Property Held in Trust
fields: 
  - Property Description: trust_property[i].name.text
  - Value: trust_property[i].value
    datatype: currency
    min: 0
---
id: illinois debts
question: |
  Debt Due to State of Illinois
subquestion: |
  Does ${decedent.name_full()} owe any debts to the State of Illinois or any county, township, 
  city, town, village, or school district located in Illinois?
fields:
  - no label: illinois_debts.there_are_any
    datatype: yesnoradio
---
code: |
  illinois_debts[i].name.text
  illinois_debts[i].complete = True 
---
id: add illinois debt
question: |
  Debt Due to State of Illinois
subquestion: |
  Below are the debts entered so far:
  ${ illinois_debts.table.show(editable=True) }
fields:
  - Are there any more debts?: illinois_debts.there_is_another
    datatype: yesnoradio
---
id: illinois debt details
question: |
  Debt Due to State of Illinois
fields: 
  - "Agency or Department": illinois_debts[i].name.text
  - Street address: illinois_debts[i].address.address
    address autocomplete: True
  - Address line 2: illinois_debts[i].address.unit
    required: False
  - City: illinois_debts[i].address.city
  - State: illinois_debts[i].address.state
    code: |
      states_list() 
  - ZIP code: illinois_debts[i].address.zip
  - "Amount Owed": illinois_debts[i].value
    datatype: currency
    min: 0
---
id: other claims
question: |
  All Other Claims
subquestion: |
  Are there any other claims against ${decedent.name_full()}'s estate?
fields:
  - no label: other_claims.there_are_any
    datatype: yesnoradio
---
code: |
  other_claims[i].name.text
  other_claims[i].complete = True 
---
id: add other claims
question: |
  All Other Claims
subquestion: |
  Below are the other claims entered so far:
  ${ other_claims.table.show(editable=True) }
fields:
  - Are there any other claims?: other_claims.there_is_another
    datatype: yesnoradio
---
id: other claims details
question: |
  All Other Claims
fields: 
  - Name: other_claims[i].name.text
  - Street address: other_claims[i].address.address
    address autocomplete: True
  - Address line 2: other_claims[i].address.unit
    required: False
  - City: other_claims[i].address.city
  - State: other_claims[i].address.state
    code: |
      states_list() 
  - ZIP code: other_claims[i].address.zip
  - Describe the claim: other_claims[i].description
  - "Amount Owed": other_claims[i].value
    datatype: currency
    min: 0
---
#### USER ####
id: user about you
question: |
  About you
subquestion: |
  Are you one of the heirs?
fields:
  - no label: user_heir_check
    datatype: yesnoradio
---
id: user not heir
question: |
  About you
subquestion: |
  If not heir, are you a representative or fiduciary of one of heirs?
fields:
  - no label: user_representing_check
    datatype: yesnoradio
---
id: spouse user
question: |
  About you
subquestion: |
  Are you ${spouse.name_full()}?
fields:
  - no label: user_spouse
    datatype: yesnoradio
---
id: your name
sets:
  - users.name.first
  - users.name.middle
  - users.name.last
  - users.name.suffix
question: |
  What is your name?
fields:
  - code: |
      users.name_fields()    
  - Relationship: users.relationship
    datatype: radio
    choices:
    - Representative
    - Child
    - Agent
---
id: user address
question: |
  About you
subquestion: |
  What is your address?
fields:
  - Street address: users.address.address
    address autocomplete: True
  - Address line 2: users.address.unit
    required: False
  - City: users.address.city
  - State: users.address.state
    code: |
      states_list() 
  - ZIP code: users.address.zip
---
id: user mailing address
question: |
  About you
subquestion: |
  Do you have a mailing address?
fields:
  - Same address: users.mailing_address
    datatype: object_radio
    choices:
      - users.address
    object labeler: |
      lambda y: y.on_one_line()
    none of the above: |
      Somewhere else
    disable others: True
    show if:
      code: |
        defined("users.address")
    default: |
      users.address
  - Street address: users.mailing_address.address
    address autocomplete: True
  - Address line 2: users.mailing_address.unit
    required: False
  - City: users.mailing_address.city
  - State: users.mailing_address.state
    code: |
      states_list() 
  - ZIP code: users.mailing_address.zip
---
#### AGENT ####
id: agent info
question: |
  Agent Detail
subquestion: |
  Do you want to name an agent for service of process or do you want to receive service of 
  process yourself?
fields:
  - Agent: agent_check
    input type: radio
    choices:
      - "I want to name an agent": yes
      - "I do not want to name an agent": no
---
id: agent name
sets:
  - agent.name.first
  - agent.name.middle
  - agent.name.last
  - agent.name.suffix
question: |
  Agent Detail
subquestion: |
  What is the name of the agent?
fields:
  - code: |
      agent.name_fields()    
---
id: agent address
question: |
  Agent Detail
subquestion: |
  What is ${agent.name_full()}'s address?
fields:
  - Street address: agent.address.address
    address autocomplete: True
  - Address line 2: agent.address.unit
    required: False
  - City: agent.address.city
  - State: agent.address.state
    code: |
      states_list() 
    default: IL
  - ZIP code: agent.address.zip
validation code: |
  if agent.address.state != "IL":
    validation_error("Agent must live in Illinois")
---
id: agent phone check
question: |
  Agent Detail
subquestion: |
  Do you wish to include ${agent.name_full()}'s phone number?
fields:
  - no label: agent_include_phone
    datatype: yesnoradio
  - "Phone number": agent.phone_number
    datatype: al_international_phone
    show if: agent_include_phone
---
######### ALL RECIPIENTS #########
reconsider: True
code: |
  all_recipients.clear()
  if spouse_alive:
    all_recipients.add(spouse)
  if heirs.number_gathered > 0:
    for child in heirs:
      all_recipients.add(child)
---
id: all recipients list
continue button field: recipients_list
question: |
  All recipeints to ${decedent.name_full()} estate
subquestion: |
  These are the list of heirs so far ${comma_and_list(all_recipients)}.
---
code: |
  all_recipients[i].name.first
  all_recipients[i].address.address
  all_recipients[i].complete = True
---
id: all recipeients 
question: |
  Does ${decedent.name_full()} have any more heirs?
subquestion: |
  So far you have told us about ${comma_and_list(all_recipients.complete_elements().full_names())}.
fields:
  - "Anyone else?": all_recipients.there_is_another
    datatype: yesnoradio
---
id: all recipeients check
question: |
  Did ${decedent.name_full()} have any recipients to their estate?
subquestion: |
  These are the list of heirs so far ${comma_and_list(all_recipients)}.  
fields:
  - no label: all_recipients.there_are_any
    datatype: yesnoradio
---
id: adding all recipients 
sets:
  - all_recipients[i].name.first
  - all_recipients[i].name.middle
  - all_recipients[i].name.last
  - all_recipients[i].name.suffix
question: |
  What is the ${ordinal(i)} recipeients name?
fields:
  - code: |
      all_recipients[i].name_fields()
  - Relationship: all_recipients[i].relationship
    input type: radio
    choices:
    - Spouse
    - Child
    - Grandchild
    - Parent 
    - Sibling
    - Neice
    - Nephew
    - Grandparent
    - Other relationship
  - Minor (under 18): all_recipients[i].child_minor
    datatype: yesnoradio
  - Birthdate: all_recipients[i].birthdate
    datatype: BirthDate
    required: False
    show if: all_recipients[i].child_minor
  - Description: all_recipients[i].description
  - Award: all_recipients[i].award
    datatype: currency
    min: 0
validation code: |
  if showifdef("all_recipients[i].birthdate") and all_recipients[i].age_in_years() > 18:
    validation_error("Minor child must be under 18")
---
sets:
  - all_recipients[i].address.address
id: all recipients address
question: |
  What is the ${all_recipients[i].name_full()}'s address?
fields:
  - Street address: all_recipients[i].address.address
    address autocomplete: True
  - Address line 2: all_recipients[i].address.unit
    required: False
  - City: all_recipients[i].address.city
  - State: all_recipients[i].address.state
    code: |
      states_list() 
  - ZIP code: all_recipients[i].address.zip
---
#### DOWNLOAD FORMS ####
id: forms finished
continue button field: finished
question: |
  Getting the Small Estate Affidavit form ready
subquestion: |
  You have now completed this program. Here are the steps you need to take to create your form:

  - If you want to make any changes to your answers or add missing information, click the __review__ you want to go to.

  - If you have filled in all your answers and do not want to make changes, click the finshed button.

  - When the form appears, you may print it or save it on your computer.

  - Keep a copy of the form for your records.

  - You must attach a copy of the death certificate to the small estate affidavit. Before you sign your name on the printed document, make sure that you have met all of the requirements for using a small estate affidavit. If you have questions about those requirements, talk to a lawyer.

  - Learn more about [transferring property with a small estate affidavit.](https://www.illinoislegalaid.org/legal-information/transferring-property-small-estate-affidavit)

---
id: forms assembling
continue button field: forms_assembling
question: |
  Almost done
subquestion: |
  After you click **Next**, it may take a few moments to finish making your forms.
  
  ###### You do not need to refresh your screen. Hang in there!
  
  [NEWLINE]
---
id: get docs screen
event: get_docs_screen
question: |
  Download
subquestion: |
  Your form is ready. View and download your form below. Click **:edit: Make changes** to fix any mistakes.
  
  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }

  ${ al_user_bundle.download_list_html() }

  [NEWLINE]

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  Thank you for using ILAO Easy Forms!
under: |
  % if not user_logged_in():
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} **Sign-in**](${url_of('login', next=interview_url())}) or [**create**](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif

  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=current_context().question_id, easy_form_variable=current_context().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[next_steps, small_estate_affidavit], filename="completed_small_estate_affidavit.docx", title="All forms", enabled=True)
---
attachment:
  - name: next_steps
    variable name: next_steps[i]
    filename: next_steps
    docx template file: next_steps.docx
---
attachment:
  - name: small_estate_affidavit
    variable name: small_estate_affidavit[i]
    filename: small_estate_affidavit
    docx template file: small_estate_affidavit.docx
---
objects:
  - next_steps: ALDocument.using(title="Next Steps", filename="next_steps.docx", enabled=True, has_addendum=False)
  - small_estate_affidavit: ALDocument.using(title="Small Estate Affidavit", filename="small_estate_affidavit.docx", enabled=True, has_addendum=False)
---
####### REVIEWS #########
id: review screen
event: review_answers
question: |
  Review screen
subquestion: |
  Edit your answers below.
review:
  - Edit: decedent.name.first
    button: |
      **Decedent Name**
      * ${decedent.name_full()}
  - Edit: illinois_death
    button: | 
      **Did ${decedent.name_full()} live in Illinois at the time of death?**  
      ${word(yesno(illinois_death))}
  - Edit: assets_limit
    button: | 
      **Do you think ${decedent.name_full()}'s total assets are less than $100,000?**  
      ${word(yesno(assets_limit))}
  - Edit: decedent_will
    button: | 
      **Did ${decedent.name_full()} leave a will?**  
      ${word(yesno(decedent_will))}
  - Edit: will_filed
    button: | 
      **If ${decedent.name_full()} had a will, is it filed with the clerk of appropariate court?**  
      ${word(yesno(will_filed))}
  - Edit: decedent.relationship
    button: | 
      **Relationship to ${decedent.name_full()}:**  
      * ${decedent.relationship}
  - Edit: decedent_death_date
    button: | 
      **${decedent.name_full()} died on :**  
      ${decedent_death_date}
  - Edit: decedent_property.address
    button: |
      **${decedent.name_full()} address before death:**
      Street address: ${ decedent_property.address}
      Address line 2: ${ decedent_property.unit}
      City or Town: ${ decedent_property.city}
      State: ${ decedent_property.state}
      ZIP: ${ decedent_property.zip}
      County: ${ decedent_property.county}
  - Edit: 
      - manual_county
      - recompute:
        - trial_court
    button: |
      **County where this case is filed:**
      ${ decedent_property.county }
    show if: len(manual_county) > 0
  - Edit: surviving_spouse
    button: | 
      **Was ${decedent.name_full()} married at the time of their death?**  
      ${word(yesno(surviving_spouse))}
      % if surviving_spouse:
      Is the spouse still alive?: ${word(yesno(spouse_alive))}
      % endif
  - Edit: spouse.name.first
    button: |
      **${decedent.name_full()} spouse’s name**
      * ${spouse.name_full()}
  - Edit: spouse.address
    button: |
      **${spouse.name_full()} address:**
      % if decedent_property == spouse.address:
      * Same address as ${decedent.name_full()}
      % else:
      Street address: ${ decedent_property.address}
      Address line 2: ${ decedent_property.unit}
      City or Town: ${ decedent_property.city}
      State: ${ decedent_property.state}
      ZIP: ${ decedent_property.zip}
      County: ${ decedent_property.county}
      % endif
  - Edit: heirs.there_are_any
    button: | 
      **Did ${decedent.name_full()} have any minor or 
      adult dependent children at the time of their death?**  
      ${word(yesno(heirs.there_are_any))}
  - Edit: heirs.revisit
    button: |
      **Minor or adult dependent children**
      % for item in heirs:
      - ${ item.name_full() }
      % endfor
  - Edit: all_recipients.there_are_any
    button: | 
      **Any recipeients to ${decedent.name_full()} estate:**  
      ${word(yesno(all_recipients.there_are_any))}
  - Edit: all_recipients.revisit
    button: |
      **All Recipeients**
      % for item in all_recipients:
      - ${ item.name_full() }
      % endfor
  # ESTATE DETAILS
  - Edit: decedent_assets.revisit
    button: |
      **Estate Assets**
      ${ decedent_assets.table.show(editable=False) }    
  - Edit: unclaimed_property
    button: | 
      **“Funds and/or assets held with the Illinois Treasurer’s Office”**  
      Add text below the list of assets? ${word(yesno(unclaimed_property))}
  - Edit: funeral_other_debts
    button: | 
      **Have all of ${decedent.name_full()}'s funeral expenses and other debts been paid?**  
      ${word(yesno(funeral_other_debts))}
  - Edit: unpaid_funeral_expense.there_are_any
    button: | 
      **Did ${decedent.name_full()} have unpaid funeral expenses?**  
      ${word(yesno(unpaid_funeral_expense.there_are_any))}
  - Edit: unpaid_funeral_expense.revisit
    button: |
      **Unpaid Funeral Expenses**
      ${ unpaid_funeral_expense.table.show(editable=False) }      
  # PAYMENTS
  - Edit: us_debts.there_are_any
    button: | 
      **Did ${decedent.name_full()} have unpaid funeral expenses?**  
      ${word(yesno(us_debts.there_are_any))}
  - Edit: us_debts.revisit
    button: |
      **Debts Due to United States**
      ${ us_debts.table.show(editable=False) }     
  - Edit: employees.there_are_any
    button: | 
      **Did ${decedent.name_full()} owe any employees?**  
      ${word(yesno(employees.there_are_any))}
  - Edit: employees.revisit
    button: |
      **Money Due to Employees**
      ${ employees.table.show(editable=False) }     
  - Edit: trust_property.there_are_any
    button: | 
      **Did ${decedent.name_full()} have any property in a trust?**  
      ${word(yesno(trust_property.there_are_any))}
  - Edit: trust_property.revisit
    button: |
      **Money or Property Held in Trust**
      ${ trust_property.table.show(editable=False) }     
  - Edit: illinois_debts.there_are_any
    button: | 
      **Did ${decedent.name_full()} any debts to the State of Illinois?**  
      ${word(yesno(illinois_debts.there_are_any))}
  - Edit: illinois_debts.revisit
    button: |
      **Debt Due to State of Illinois**
      ${ illinois_debts.table.show(editable=False) }     
  - Edit: other_claims.there_are_any
    button: | 
      **Are there any other claims against ${decedent.name_full()}’s estate?**  
      ${word(yesno(other_claims.there_are_any))}
  - Edit: other_claims.revisit
    button: |
      **Debt Due to State of Illinois**
      ${ other_claims.table.show(editable=False) }     
  # ABOUT YOU
  - Edit: user_heir_check
    button: | 
      **Are you one of ${decedent.name_full()} heirs?**  
      ${word(yesno(user_heir_check))}
  - Edit: user_spouse
    button: | 
      **Are you ${spouse.name_full()} heirs?**  
      ${word(yesno(user_spouse))}
  # User name, address, mailing address
  - Edit: agent_check
    button: | 
      **Do you want to name an agent for service of process or do you want to receive service of process yourself?**  
      Agent:
      % if agent_check == "yes":
      * I want to name an agent
      % else:
      * I do not want to name an agent
      % endif
  # Agent name, address, phone number
---
############# REVISITS ###########
id: revisit decedent_assets
continue button field: decedent_assets.revisit
question: |
  Edit your answers about Decedent Assets
subquestion: |
  ${ decedent_assets.table }
  ${ decedent_assets.add_action() }
---
id: revisit unpaid_funeral_expense
continue button field: unpaid_funeral_expense.revisit
question: |
  Edit the unpaid funeral expenses
subquestion: |
  ${ unpaid_funeral_expense.table }
  ${ unpaid_funeral_expense.add_action() }
---
id: revisit us_debts
continue button field: us_debts.revisit
question: |
  Edit the debts due to United States
subquestion: |
  ${ us_debts.table }
  ${ us_debts.add_action() }
---
id: revisit employees
continue button field: employees.revisit
question: |
  Edit money due to employees
subquestion: |
  ${ employees.table }
  ${ employees.add_action() }
---
id: revisit trust_property
continue button field: trust_property.revisit
question: |
  Edit the trust property details
subquestion: |
  ${ trust_property.table }
  ${ trust_property.add_action() }
---
id: revisit illinois_debts
continue button field: illinois_debts.revisit
question: |
  Edit the debts to Illinois state
subquestion: |
  ${ illinois_debts.table }
  ${ illinois_debts.add_action() }
---
id: revisit other_claims
continue button field: other_claims.revisit
question: |
  Edit the other claims
subquestion: |
  ${ other_claims.table }
  ${ other_claims.add_action() }
---
############# TABLES ###########
id: decedent assets table
table: decedent_assets.table
rows: decedent_assets
columns:
  - Asset: |
      row_item.name
  - Description: |
      row_item.description if hasattr(row_item, 'description') else ''
  - Value: |
      currency(row_item.value) if hasattr(row_item, 'value') else ''
delete buttons: True
confirm: True
---
id: funeral expenses table
table: unpaid_funeral_expense.table
rows: unpaid_funeral_expense
columns:
  - Name: |
      row_item.name
  - Amount: |
      currency(row_item.value) if hasattr(row_item, 'value') else ''
delete buttons: True
confirm: True
---
id: us debts table
table: us_debts.table
rows: us_debts
columns:
  - Department: |
      row_item.name
  - Amount: |
      currency(row_item.value) if hasattr(row_item, 'value') else ''
delete buttons: True
confirm: True
---
id: employees table
table: employees.table
rows: employees
columns:
  - Employee: |
      row_item.name
  - Amount: |
      currency(row_item.value) if hasattr(row_item, 'value') else ''
delete buttons: True
confirm: True
---
id: trust property table
table: trust_property.table
rows: trust_property
columns:
  - Property: |
      row_item.name
  - Amount: |
      currency(row_item.value) if hasattr(row_item, 'value') else ''
delete buttons: True
confirm: True
---
id: illinois debts table
table: illinois_debts.table
rows: illinois_debts
columns:
  - Department/Agency: |
      row_item.name
  - Amount: |
      currency(row_item.value) if hasattr(row_item, 'value') else ''
delete buttons: True
confirm: True
---
id: other debts table
table: other_claims.table
rows: other_claims
columns:
  - Name: |
      row_item.name
  - Claim: |
      row_item.description
  - Amount: |
      currency(row_item.value) if hasattr(row_item, 'value') else ''
delete buttons: True
confirm: True
---
id: Edit heirs
continue button field: heirs.revisit
question: |
  Edit any minor or adult dependent children
subquestion: |
  ${ heirs.table }
  ${ heirs.add_action() }
---
table: heirs.table
rows: heirs
columns:
  - Name: |
      row_item.name_full() if defined("row_item.name.first") else ""
  - Relationship: |
      row_item.relationship if defined("row_item.relationship") else ""
  - Minor: |
      row_item.child_minor if defined("row_item.child_minor") else ""
  - Birthdate: |
      row_item.birthdate if defined("row_item.birthdate") else ""
  - Action: |
      action_button_html(url_action(row_item.attr_name("row_item.relationship")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: Edit all_recipients
continue button field: all_recipients.revisit
question: |
  Edit any minor or adult dependent children
subquestion: |
  ${ all_recipients.table }
  ${ all_recipients.add_action() }
---
table: all_recipients.table
rows: all_recipients
columns:
  - Name: |
      row_item.name_full() if defined("row_item.name.first") else ""
  - Relationship: |
      row_item.relationship if defined("row_item.relationship") else ""
  - Minor: |
      row_item.child_minor if defined("row_item.child_minor") else ""
  - Birthdate: |
      row_item.birthdate if defined("row_item.birthdate") else ""
  - Claim: |
      row_item.description if defined("row_item.description") else ""
  - Award: |
      action_button_html(url_action(row_item.attr_name("row_item.award")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---